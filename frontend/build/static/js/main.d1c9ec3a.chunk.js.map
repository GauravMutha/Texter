{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","_useState","useState","_useState2","_slicedToArray","selectedChat","setSelectedChat","_useState3","_useState4","user","setUser","_useState5","_useState6","notification","setNotification","_useState7","_useState8","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","_asyncToGenerator","_regeneratorRuntime","mark","_callee","config","_yield$axios$post","data","wrap","_context","prev","next","title","status","duration","isClosable","position","abrupt","headers","axios","post","sent","setItem","stringify","t0","description","response","message","stop","apply","arguments","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","colorScheme","style","marginTop","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","_useState9","_useState10","_useState11","_useState12","pic","setPic","_useState13","_useState14","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","then","url","toString","catch","error","postDetails","files","Homepage","socket","selectedChatCompare","Container","maxW","centerContent","Box","d","justifyContent","bg","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","Tabs","isFitted","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","concat","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","_ChatState","handleSearch","_ref2","query","_yield$axios$get","Authorization","token","get","_x","handleRename","_ref3","_callee2","_yield$axios$put","_context2","put","chatId","chatName","handleAddUser","_ref4","_callee3","user1","_yield$axios$put2","_context3","find","u","groupAdmin","_x2","handleRemove","_ref5","_callee4","_yield$axios$put3","_context4","_x3","flexWrap","pb","ml","Spinner","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","_toConsumableArray","io","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.d1c9ec3a.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, password, pic);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (pics.type !== \"image/jpeg\" && pics.type !== \"image/png\") {\r\n      toast({\r\n        title: \"Please Select a JPEG or PNG Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n\r\n      const data = new FormData()\r\n      data.append(\"file\", pics)\r\n      data.append(\"upload_preset\", \"Talks App\")\r\n      data.append(\"cloud_name\", \"Gaurav1\")\r\n      axios.post(\"https://api.cloudinary.com/v1_1/Gaurav1/image/upload\", data)\r\n        .then((response) => {\r\n          console.log(\"Cloudinary response:\", response);\r\n          setPic(response.data.url.toString());\r\n          setPicLoading(false);\r\n          toast({\r\n            title: \"Image uploaded successfully!\",\r\n            status: \"success\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n            position: \"bottom\",\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Cloudinary error:\", error);\r\n          setPicLoading(false);\r\n        });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"pic\">\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          Texter\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://Texter.herokuapp.com\"; -> After deployment\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({user, handleFunction }) => {\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Gaurav, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Texter\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}